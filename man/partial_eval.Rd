% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partial.R
\name{partial_eval}
\alias{partial_eval}
\title{Partially evaluation of a function}
\usage{
partial_eval(fun, args, eval.point)
}
\arguments{
\item{fun}{A function to partially evaluate.}

\item{args}{A list of the arguments necessary for the function to execute. See details.}

\item{eval.point}{The function line from which to return the result. A line number in the
body of the function, or a character string quoting a part of the function. See details.}
}
\description{
Partially evaluates a function, returning only the objects which exist
 after the last line of partial evaluation.
}
\details{
Parameter **args** can be safely ignored for
functions which take no arguments explicitly, or for functions that have all their arguments
set. **eval.point** stands for the line in the function body to be replaced with a return -
this line is temporarily overwritten so a return can be made from it. See examples for usage.
}
\note{
If regex matching fails and your expression does not evaluate to anything valid,
please try shortening it or supplying a different part of it.
}
\examples{

# create a dummy function
dummy_function <- function( x,     y = 2,    z,
                            a = 5, b = TRUE, c = 10 )
{
 x_2 <- x + y - z
 TRUTHFULLY <- b
 negative <- (c-a) > 0

return(y)
}

# works with function body line number
partial_eval( fun = dummy_function,
              args = list(x = 10,z = FALSE, b = FALSE),
              eval.point = 1 )
partial_eval( fun = dummy_function,
              args = list(x = 10,z = FALSE, b = FALSE),
              eval.point = 3 )

# works with partial string matching
partial_eval( fun = dummy_function,
              args = list(x = 10,z = FALSE, b = FALSE),
              eval.point = "negat" )
# and semi-full string matching
partial_eval( fun = dummy_function,
              args = list(x = 10,z = FALSE, b = FALSE),
              eval.point = "negative <- " )

}
