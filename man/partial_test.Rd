% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partial_test.R
\name{partial_test}
\alias{partial_test}
\title{Partial test of a function}
\usage{
partial_test(fun, args, eval_point, compare_fun = NULL, compare_object = NULL)
}
\arguments{
\item{fun}{A function to partially evaluate (either the function object, or a string).}

\item{args}{A list of the arguments necessary for the function to execute, or nothing.
If nothing default parameter values must be specified in the function signature.}

\item{eval_point}{The function line from which to return the result. A line number in the
body of the function, or a character string quoting a part of the function. See details.}

\item{compare_fun}{A predicate function to compare to, defaults to NULL.}

\item{compare_object}{An object to compare to, defaults to NULL.}
}
\description{
Partially evaluates a function, returning only the objects which exist
 after the last line of partial evaluation and compares them to expected output
}
\details{
Parameter **args** can be safely ignored for
functions which take no arguments explicitly, or for functions that have all their arguments
set. **eval_point** stands for the line in the function body to be replaced with a return -
this line is temporarily overwritten so a return can be made from it.
The object to return is then compared, either using any form of predicate function,
or using an object to compare to.
If both function and object are used, the object is compared to the result of
the partial evaluation using the same function. See examples for usage.
}
\note{
If regex matching fails and your expression does not evaluate to anything valid,
please try shortening it or supplying a different part of it. (Or specifying the correct
line number.)
}
\examples{

# create a dummy function
dummy_function <- function( x,     y = 2,    z,
                            a = 5, b = TRUE, c = 10 )
{
  x_2 <- x + y - z
  TRUTHFULLY <- b
  negative <- (c-a) > 0
  return(y)
  }

# works with function body line number
partial_test( fun = dummy_function,
              args = list(x = 10,z = FALSE, b = FALSE),
              eval_point = 1,
              compare_object =  NA)

partial_test( fun = dummy_function,
              args = list(x = 10,z = FALSE, b = FALSE),
              eval_point = 3,
              compare_object = FALSE)


# works with partial string matching
partial_test( fun = dummy_function,
              args = list(x = 10,z = FALSE, b = FALSE),
              eval_point = "negat",
              compare_object = TRUE )

# and semi-full string matching
partial_test( fun = dummy_function,
              args = list(x = 10,z = FALSE, b = FALSE),
              eval_point = "negative <- ",
              compare_object = TRUE )

}
