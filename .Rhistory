source('C:/Users/juraj/git_hub/pretestR/R/partial_eval.R')
see <- partial_eval(fun = bad_fun, args = list(x = 2, y = 2, z = 2), eval.point = 3)
source('C:/Users/juraj/git_hub/pretestR/R/partial_eval.R')
see <- partial_eval(fun = bad_fun, args = list(x = 2, y = 2, z = 2), eval.point = 3)
View(see)
see$x
see[[i]]
see[[x]]
source('C:/Users/juraj/git_hub/pretestR/R/partial_eval.R')
see <- partial_eval(fun = bad_fun, args = list(x = 2, y = 2, z = 2), eval.point = 3)
View(see)
as.list(environment())
source('C:/Users/juraj/git_hub/pretestR/R/partial_eval.R')
see <- partial_eval(fun = bad_fun, args = list(x = 2, y = 2, z = 2), eval.point = 3)
source('C:/Users/juraj/git_hub/pretestR/R/partial_eval.R')
see <- partial_eval(fun = bad_fun, args = list(x = 2, y = 2, z = 2), eval.point = 3)
View(see)
source('C:/Users/juraj/git_hub/pretestR/R/partial_eval.R')
see <- partial_eval(fun = bad_fun, args = list(x = 2, y = 2, z = 2), eval.point = 3)
View(see)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
pretest(fun = bad_fun, args = list(x = 2, y = 2, z = 2))
see <- pretest(fun = bad_fun, args = list(x = 2, y = 2, z = 2))
View(see)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(fun = bad_fun, args = list(x = 2, y = 2, z = 2))
View(see)
see[["Objects in scope"]][["x"]] - see[["Objects in scope"]][["z"]]
bad_fun
body(bad_fun)[[2]] <- substitute(what <-function(){cat(z)})
see <- pretest(fun = bad_fun, args = list(x = 2, y = 2, z = 2))
see
see$`Failing line`
see$`Objects in scope`$what()
see$`Objects in scope`$what
deparse(bad_fun())
deparse(bad_fun(x = 2, y = 2) z = 2)
deparse(bad_fun(x = 2, y = 2, z = 2))
deparse(quote(bad_fun(x = 2, y = 2, z = 2)))
quote_fun <- function(x){quote(x)}
quote_fun(bad_fun(x=2,y=2,z=2))
bad_fun(x=2,y=2,z=2)
quote_fun(bad_fun(x=2,y=2,z=2))
quote_fun <- function(x){quote({x})}
quote_fun(bad_fun(x=2,y=2,z=2))
quote_fun <- function(x){quote(.x)}
quote_fun(bad_fun(x=2,y=2,z=2))
quote_fun <- function(x){x %>% quote()}
quote_fun(bad_fun(x=2,y=2,z=2))
library(magrittr)
quote_fun(bad_fun(x=2,y=2,z=2))
head(bad_fun(x=2,y=2,z=2))
head(bad_fun
)
head(bad_fun)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(quote_fun)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(quote_fun)
quote_fun
body(quote_fun)
body(quote_fun)[5]
body(quote_fun)[[4]]
body(quote_fun)[[5]]
body(quote_fun)[[3]]
body(quote_fun)[[2]]
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(quote_fun)
see <- pretest(complex_dummy)
View(complex_dummy)
tryCatch(
for (i in 1:length(body(bad_fun)))
{
partial_eval( complex_dummy, eval.point = i)
},
error = function(e){ return(iter_death)}
))
tryCatch(
for (i in 1:length(body(bad_fun)))
{
partial_eval( complex_dummy, eval.point = i)
},
error = function(e){ return(iter_death)}
)
View(complex_dummy)
partial_eval( complex_dummy, eval.point = 3)
remove(iter_death)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy)
see <- pretest(complex_dummy, args = list(X = X_1, Y = Y_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1, Y = Y_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1, Y = Y_1))
length(see)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1, Y = Y_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1, Y = Y_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1, Y = Y_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1, Y = Y_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1, Y = Y_1))
see <- pretest(complex_dummy, args = list(X = X_1))
View(see)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
partial_eval( complex_dummy, eval.point = 2)
partial_eval( complex_dummy, eval.point = 1)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
View(see)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
View(see)
View(see)
missing(see)
lapply(see,missing)
lapply(see,FUN = missing)
missing(see)
missing(see$Y)
?missing
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
match.arg(complex_dummy)
head(complex_dummy)
head(complex_dummy)[[1]]
bad_fun
bad_fun()
bad_fun(x = 5)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
remove(res)
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/pretest.R')
see <- pretest(complex_dummy, args = list(X = X_1))
View(see)
see <- pretest(complex_dummy, args = list(X = X_1, Y= Y_1))
see <- pretest(complex_dummy, args = list())
View(see)
usethis::use_testthat()
usethis::use_travis()
usethis::use_test()
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox("dummy_fun")
blackbox(complex_fun,args = list(X=X_1,Y=Y_1))
partial_eval
partial_eval(fun = complex_fun, args = list(X = X_1, Y= Y_1), eval.point = 7)
partial_eval(fun = complex_dummy, args = list(X = X_1, Y= Y_1), eval.point = 7)
partial_eval(fun = complex_dummy, args = list(X = X_1), eval.point = 7)
blackbox(complex_dummy,args = list(X=X_1,Y=Y_1))
blackbox(complex_dummy,args = list(X=X_1))
blackbox("complex_dummy",args = list(X=X_1))
blackbox(as.name("complex_dummy"),args = list(X=X_1))
blackbox(eval(as.name("complex_dummy")),args = list(X=X_1))
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox("complex_dummy",args = list(X=X_1))
blackbox("complex_dummy",args = list(X=X_1, Y=Y_1))
blackbox(complex_dummy,args = list(X=X_1, Y=Y_1))
blackbox(complex_dummy,args = list(X=X_1))
dummy_fun( x = 5, y = "this_crashes", z = 2){
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)  }
dummy_fun <- function( x = 5, y = "this_crashes", z = 2){
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)  }
dummy_fun()
blackbox(fun = dummy_fun)
blackbox(fun = dummy_fun)
blackbox(fun = "dummy_fun")
partial_eval(dummy_fun)
partial_eval(dummy_fun, eval.point = 5)
blackbox(complex_dummy,args = list(X=X_1, Y=Y_1))
blackbox(complex_dummy)
body(fun)
body(complex_dummy)
head(complex_dummy)
head(complex_dummy)[[1]]
gsub(x = head(complex_dummy)[[1]], pattern = "function", replacement = "")
gsub(x = head(complex_dummy)[[1]], pattern = "function|\\(", replacement = "")
gsub(x = head(complex_dummy)[[1]], pattern = "function|\\(|\\)", replacement = "")
strsplit(gsub(x = head(complex_dummy)[[1]], pattern = "function|\\(|\\)", replacement = ""),",")
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
exists(args)
exists(x = args)
?exists
missing(args)
args
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy, args = list(X = X_1))
blackbox(complex_dummy)
blackbox(complex_dummy, args = list(X = X_1, Y= Y_1))
blackbox(complex_dummy, args = list(X = X_1))
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun, args = list(x = 5))
blackbox(dummy_fun)
blackbox(dummy_fun)
dummy_fun <- function( x = 5,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun)
blackbox(dummy_fun)
dummy_fun <- function( x = 5,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(dummy_fun)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(dummy_fun)
partial_eval(fun = dummy_fun)
partial_eval(fun = dummy_fun, eval.point = 5)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(dummy_fun)
blackbox(dummy_fun, args = list(x = 5))
dummy_fun <- function( x )
{
x = x + 2
z = x + 3
ls()
stop()
print("Hello, github!")
return(x)
}
blackbox(dummy_fun)
dummy_fun <- function( x )
{
x = x + 2
z = x + 3
ls()
stop()
print("Hello, github!")
return(x)
}
blackbox(dummy_fun, list(x = 2))
dummy_fun <- function( x )
{
x = x + 2
z = x + 3
lister <- function() ls()
stop()
print("Hello, github!")
return(x)
}
blackbox(dummy_fun)
blackbox(dummy_fun, list(x = 2))
get_res <-       blackbox(dummy_fun, list(x = 2))
get_res
devtools::document()
devtools::check()
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun, args = list(x = 5))
devtools::check()
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
devtools::check()
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
devtools::check()
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
devtools::check()
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun, args = list(x = 5))
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun)
devtools::check()
devtools::check()
devtools::check()
devtools::reload()
devtools::document()
devtools::check()
remove(list=ls())
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
devtools::check()
devtools::check()
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a) > 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative \\<- (c-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative \\<\\- (c-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative \\<\\- (c-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative \\<\\- (c\\-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c-a) > 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c\\-" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c\\\\-" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c\\\\-" )
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <_" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <-" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a)" )
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\\\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c " )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c  " )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c " )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a" )
grep(pattern = "negative <- (c-a", x = "negative <- (c-a")
grep(pattern = "negative <- (c-a)", x = "negative <- (c-a)")
grep(pattern = "negative <- (c-a)", x = "negative <- (c\\-a)")
grep(pattern = "negative <- (c\\-a)", x = "negative <- (c\\-a)")
grep(pattern = "negative <- (c)", x = "negative <- (c)")
grep(pattern = "negative <- (c", x = "negative <- (c")
grep(pattern = "negative <- c", x = "negative <- c")
grep(pattern = "negative <- c", x = "negative <- c-a")
grep(pattern = "negative <- c-a", x = "negative <- c-a")
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
devtools::check()
