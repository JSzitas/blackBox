dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun,args = list(x = 2, y = "death", z = 5),  eval.poin = 3)
View(test_res)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun,args = list(x = 2, y = "death", z = 5),  eval.point = 3)
View(test_res)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun,  eval.point = 3)
source('C:/Users/juraj/git_hub/blackBox/R/partial.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun,  eval.point = 3)
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5), eval.point = 2)
test_res <- partial(dummy_fun, eval.point = 2)
View(test_res)
test_no_args <- partial(dummy_fun, eval.point = 2)
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5), eval.point = 2)
identical(test_no_args, test_res)
identical(test_no_args$y, test_res$y)
test_no_args$y
test_no_args$z
test_no_args$x
test_res$x
devtools::check()
devtools::check()
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5), eval.point = 2)
test_res$x
devtools::check()
test_no_args <- partial(dummy_fun, eval.point = 2)
identical(rest_no_args$x, list(c(" x = 2", " y = \"death\"", " z = 5 ")))
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("doFuture", type = "Suggests")
devtools::check()
usethis::use_test()
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
x <- list("something")
# comments work
z <- "something_else"
return(x)
}
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 7,
compare.object = list("something") )
source('C:/Users/juraj/git_hub/recovery/R/partial_test.R')
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 7,
compare.object = list("something") )
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 7,
compare.object = "something_else" )
partial( dummy_fun,
args = list(y = 2),
eval.point = 7)
source('C:/Users/juraj/git_hub/recovery/R/partial.R')
eval.point = 7, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 7, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 8, FALSE)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
x <- list("something")
# comments work
z <- "something_else"
return(x)
}
partial( dummy_fun,
args = list(y = 2),
eval.point = 8, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 7, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 6, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 5, FALSE)
object_comparison <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 6,
compare.object = list("something") )
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
x <- list("something")
# comments work
z <- "something_else"
return(x)
}
object_comparison <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 6,
compare.object = list("something") )
object_comparison <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 7,
compare.object = list("something") )
partial( dummy_fun,
args = list(y = 2),
eval.point = 7, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 8, FALSE)
partial( dummy_fun,
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
x <- list("something")
# comments work
z <- "something_else"
z <- "ensure_that_you_never_go_over_the_end"
return(x)
}
object_comparison <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 7,
compare.object = list("something") )
expect_true(object_comparison)
partial( dummy_fun,
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
x <- list("something")
# comments work
z <- "something_else"
z <- "ensure_that_you_never_go_over_the_end"
return(x)
}
object_comparison <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 7,
compare.object = list("something") )
expect_true(object_comparison)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
x <- list("something")
# comments work
z <- "something_else"
z <- "ensure_that_you_never_go_over_the_end"
return(x)
}
object_comparison <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 7,
compare.object = list("something") )
object_comparison <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 7,
compare.object = list("something") )
object_comparison <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 8,
compare.object = list("something") )
partial( dummy_fun,
args = list(y = 2),
eval.point = 8, FALSE)
source('C:/Users/juraj/git_hub/recovery/R/partial_test.R')
partial( dummy_fun,
args = list(y = 2),
eval.point = 8, FALSE)
body(dummy_fun)
body(dummy_fun)[[8]]
body(dummy_fun)[[7]]
body(dummy_fun)[[6]]
partial( dummy_fun,
args = list(y = 2),
eval.point = 7, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 6, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 5, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 4, FALSE)
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 7,
compare.object = list("something") )
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 6,
compare.object = list("something") )
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 5,
compare.object = list("something") )
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 4,
compare.object = list("something") )
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 3,
compare.object = list("something") )
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 5,
compare.object = list("something") )
source('C:/Users/juraj/git_hub/recovery/R/partial_test.R')
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 5,
compare.object = list("something") )
partial( dummy_fun,
args = list(y = 2),
eval.point = 5, FALSE)
partial( dummy_fun,
args = list(y = 2),
eval.point = 5, FALSE)
source('C:/Users/juraj/git_hub/recovery/R/partial_test.R')
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 5,
compare.object = list("something") )
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 6,
compare.object = list("something") )
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 6,
compare.object = "something_else" )
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 5,
compare.object = list("something") )
View(dummy_fun)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
x <- list("something")
z <- "something_else"
z <- "ensure_that_you_never_go_over_the_end"
return(x)
}
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 5,
compare.object = list("something") )
object_comparison_list <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 5,
compare.object = list("something") )
object_comparison_string <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 6,
compare.object = "something_else" )
remove(list=ls())
source('C:/Users/juraj/git_hub/recovery/R/partial_test.R')
source('C:/Users/juraj/git_hub/recovery/R/partial.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
x <- list("something")
z <- "something_else"
z <- "ensure_that_you_never_go_over_the_end"
return(x)
}
object_comparison <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 8,
compare.object = list("something") )
object_comparison_list <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 5,
compare.object = list("something") )
object_comparison_string <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 6,
compare.object = "something_else" )
object_comparison_list <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 4,
compare.object = list("something") )
object_comparison_list <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 5,
compare.object = list("something") )
object_comparison_list <- partial_test( dummy_fun,
args = list(y = 2),
eval.point = 6,
compare.object = list("something") )
partial(ummy_fun,
+                                         args = list(y = 2),
+                                         eval.point = 6,)
partial(dummy_fun,
args = list(y = 2),
eval.point = 6,)
partial(dummy_fun,
args = list(y = 2),
eval.point = 5)
partial(dummy_fun,
args = list(y = 2),
eval.point = 4)
partial(dummy_fun,
args = list(y = 2),
eval.point = 3)
partial(dummy_fun,
args = list(y = 2),
eval.point = 1)
partial(dummy_fun,
args = list(y = 2),
eval.point = 9)
partial(dummy_fun,
args = list(y = 2),
eval.point = 8)
partial(dummy_fun,
args = list(y = 2),
eval.point = 7)
partial(dummy_fun,
args = list(y = 2),
eval.point = 6)
View(dummy_fun)
partial(dummy_fun,
args = list(y = 2),
eval.point = 7)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
w <- list("something")
z <- "something_else"
z <- "ensure_that_you_never_go_over_the_end"
return(x)
}
partial(dummy_fun,
args = list(y = 2),
eval.point = 7)
partial(dummy_fun,
args = list(y = 2),
eval.point = 6)
body(dummy_fun)[[6]]
source('C:/Users/juraj/git_hub/recovery/R/partial.R')
partial(dummy_fun,
args = list(y = 2),
eval.point = 6)
partial(dummy_fun,
args = list(y = 2),
eval.point = 5)
partial(dummy_fun,
args = list(y = 2),
eval.point = 7)
partial(dummy_fun,
args = list(y = 2),
eval.point = 8)
partial(dummy_fun,
args = list(y = 2),
eval.point = 9)
partial(dummy_fun,
args = list(y = 2),
eval.point = 8)
partial(dummy_fun,
args = list(y = 2),
eval.point = 2)
partial(dummy_fun,
args = list(y = 2),
eval.point = 3)
partial(dummy_fun,
args = list(y = 2),
eval.point = 4)
partial(dummy_fun,
args = list(y = 2),
eval.point = 5)
partial(dummy_fun,
args = list(y = 2),
eval.point = 6)
partial(dummy_fun,
args = list(y = 2),
eval.point = 7)
partial(dummy_fun,
args = list(y = 2),
eval.point = 8)
usethis::use_appveyor()
usethis::use_readme_rmd()
usethis::use_travis()
covr::package_coverage()
usethis::use_coverage()
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover.R')
test_res <- recover(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover.R')
test_res <- recover(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover.R')
test_res <- recover(dummy_fun)
View(test_res)
View(test_res)
parallel_fun <- function(x,y,z, length.out ){
magical <- function(x,y,z){
x <- x + 5
z <- 12
x <- y + z
return(x)
}
res <-  foreach(i = 1:length.out ) %dopar%
{
# if you dont assign here the test fails
weirdness <- magical(x,y,z)
}
return(res)
}
test_res <- recover( parallel_fun,
args = list( x = 5,
y ="fly",
z = 2,
length.out = 10 ))
View(test_res)
as.character(test_res[["Failing line"]])
test_res$'Objects in scope'$magical
(as.character(test_res$'Failing line')
)
devtools::test()
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
View(test_res)
suppressWarnings( library(doFuture) )
registerDoFuture()
plan(multiprocess)
parallel_fun <- function(x,y,z, length.out ){
magical <- function(x,y,z){
x <- x + 5
z <- 12
x <- y + z
return(x)
}
res <-  foreach(i = 1:length.out ) %dopar%
{
weirdness <- magical(x,y,z)
}
return(res)
}
test_res <- recover_types( parallel_fun,
args = list( x = 5,
y ="fly",
z = 2,
length.out = 10 ))
expect_equal(names(test_res), c("Failing line", "Types"))
test_res <- recover_types( parallel_fun,
args = list( x = 5,
y ="fly",
z = 2,
length.out = 10 ))
as.character(test_res$'Failing line')
covr::package_coverage()
