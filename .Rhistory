}
test_res <- recover_types(dummy_fun)
View(test_res)
View(test_res)
partial(dummy_fun, args = list(x= 2,y = "death",z = 2), eval.point = 2)
partial(dummy_fun, args = list(x= 2,y = "death",z = 2), eval.point = 3)
partial(dummy_fun, args = list(x= 2,y = "death",z = 2), eval.point = 4)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[1]][[1]]
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[1]][[1]]
as.list(test_res[[1]][[1]])
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
View(test_res)
list(x = 2, y = "death")
as.environment(test_res[[1]])
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[1]][[1]][1]
test_res[[1]][[1]][2]
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[1]][[1]]
as.expression(parse(text = test_res[[1]][[1]]))
parse(text = test_res[[1]][[1]])
eval(parse(text = test_res[[1]][[1]]))
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[1]][[1]]
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[1]]
lapply(test_res[[1]], function(i){
strsplit(i, split = "=", fixed = TRUE)[2]
})
lapply(test_res[[1]], function(i){
strsplit(i, split = "=", fixed = TRUE)
})
lapply(test_res[[1]], function(i){
strsplit(i, split = "=", fixed = TRUE)[1]
})
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[1]][[1]]
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
unlist(test_res[[1]])
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
print(test_res)
do.call(dummy_fun, test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
do.call(dummy_fun, test_res)
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[" x  "]]
test_res$x
test_res$"x"
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[" x "]]
test_res <- recover_types(dummy_fun, list = (2,"death",2))
test_res <- recover_types(dummy_fun, list(2,"death",2))
View(test_res)
test_res[[1]]
test_res[[2]]
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun, list(2,"death",2))
View(test_res)
test_res <- recover_types(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[[1]][[1]]
test_res[[2]][[1]]
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
body(dummy_fun)[4]
body(dummy_fun)[[3]]
body(dummy_fun)[[4]]
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover_types.R')
test_res <- recover_types(dummy_fun)
View(test_res)
test_res <- recover_types(dummy_fun)
View(test_res)
test_res[["Failing line"]]
as.character(test_res[["Failing line"]])
as.character(test_res[["Failing line"]])
View(test_res)
parallel_fun <- function(x,y,z, length.out ){
magical <- function(x,y,z){
x <- x + 5
z <- 12
x <- y + z
return(x)
}
res <-  foreach(i = 1:length.out ) %dopar%
{
weirdness <- magical(x,y,z)
}
return(res)
}
test_res <- recover_types( parallel_fun,
args = list( x = 5,
y ="fly",
z = 2,
length.out = 10 ))
View(test_res)
View(test_res)
test_res[["Failing line"]]
as.character(res <- foreach(i = 1:length.out) %dopar% {
weirdness <- magical(x, y, z)
})
as.character(test_res[["Failing line"]])
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover(dummy_fun)
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover.R')
<- recover(dummy_fun)
recover(dummy_fun)
test <- recover(dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover.R')
test <- recover(dummy_fun)
View(test)
source('C:/Users/juraj/git_hub/recovery/R/recover.R')
test <- recover(dummy_fun)
View(test)
View(test)
as.character(test[["Failing line"]])
View(test)
parallel_fun <- function(x,y,z, length.out ){
magical <- function(x,y,z){
x <- x + 5
z <- 12
x <- y + z
return(x)
}
res <-  foreach(i = 1:length.out ) %dopar%
{
# if you dont assign here the test fails
weirdness <- magical(x,y,z)
}
return(res)
}
test_res <- recover( parallel_fun,
args = list( x = 5,
y ="fly",
z = 2,
length.out = 10 ))
View(test_res)
as.character(test_res[["Failing line"]])
View(test_res)
test_res <- recover("dummy_fun")
View(test_res)
source('C:/Users/juraj/git_hub/recovery/R/recover.R')
test_res <- recover("dummy_fun")
View(test_res)
eval(as.name("dummy_fun"))
source('C:/Users/juraj/git_hub/recovery/R/recover.R')
test_res <- recover("dummy_fun")
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5),
eval.point = "x <- x",
full.scope = TRUE )
View(test_res)
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5),
eval.point = "x <- x + 5",
full.scope = TRUE )
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5),
eval.point = "x <- x + ",
full.scope = TRUE )
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5),
eval.point = "x <- y ",
full.scope = TRUE )
View(test_res)
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5),
eval.point = "x <- y + 5 ",
full.scope = TRUE )
source('C:/Users/juraj/git_hub/recovery/R/partial.R')
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5),
eval.point = "x <- y + 5 ",
full.scope = TRUE )
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5),
eval.point = "x <- y + 5",
full.scope = TRUE )
View(test_res)
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5),
eval.point = "x <- x + 5",
full.scope = TRUE )
View(test_res)
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5),
eval.point = "x <- x + 5",
full.scope = TRUE )
View(test_res)
test_res
covr::codecov()
covr::package_coverage()
covr::package_coverage()
covr::package_coverage()
partial( dummy_fun, eval.point = "x <- x ",
fix.pattern = FALSE )
source('C:/Users/juraj/git_hub/recovery/R/partial.R')
partial( dummy_fun, eval.point = "x <- x ",
fix.pattern = FALSE )
partial( dummy_fun, eval.point = "x <- y +",
fix.pattern = FALSE )
partial( dummy_fun, eval.point = "x <- x",
fix.pattern = FALSE )
partial( dummy_fun, eval.point = "x <- ",
fix.pattern = FALSE )
covr::package_coverage()
covr::package_coverage()
attributes(list("something"))
attributes()
?attributes()
x <- list("something")
attributes(x)
x <- list("something","something_else")
attributes(x)
x <- list(x = "something",y = "something_else")
attributes(x)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
x <- list(xy = "something")
z <- "something_else"
z <- "ensure_that_you_never_go_over_the_end"
return(x)
}
partial_test( dummy_fun,
args = list(y = 2),
eval.point = 8,
compare.object = list(xy = "something"),
partial.matching = TRUE)
covr::package_coverage()
covr::codecov(token = TOKEN)
devtools::check()
dummy_fun <- function( x )
{
x = x + 2
z = x + 3
lister <- function() ls()
stop()
print("Hello, github!")
return(x)
}
recover(fun = dummy_fun)
dummy_fun <- function( x )
{
x = x + 2
z = x + 3
lister <- function() ls()
print("Hello, github!")
return(x)
}
recover(fun = dummy_fun)
dummy_fun <- function( x = 2 )
{
x = x + 2
z = x + 3
lister <- function() ls()
print("Hello, github!")
return(x)
}
recover(fun = dummy_fun)
see <- recover(fun = dummy_fun)
source('C:/Users/juraj/git_hub/recovery/R/recover.R')
see <- recover(fun = dummy_fun)
dummy_fun <- function( x = 2 )
{
x = x + 2
z = x + 3
lister <- function() ls()
stop()
print("Hello, github!")
return(x)
}
recover(fun = dummy_fun)
devtools::check()
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
recover(fun = dummy_fun)
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
x = y + z
return(x)
}
recover(fun = dummy_fun)
dummy_fun <- function( x = 2,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
recover(fun = dummy_fun)
devtools::check()
devtools::check()
devtools::check()
dummy_function <- function( x,     y = 2,    z,
a = 5, b = TRUE, c = 10 )
{
x_2 <- x + y - z
TRUTHFULLY <- b
negative <- (c-a) > 0
return(y)
}
# works with function body line number
partial( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = 1)
dummy_function <- function( x,     y = 2,    z,
a = 5, b = TRUE, c = 10 )
{
x_2 <- x + y - z
TRUTHFULLY <- b
negative <- (c-a) > 0
return(y)
}
# works with function body line number
partial( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = 2)
partial_test( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = 1,
compare.obj =  12)
partial_test( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = 1,
compare.obj =  c(12))
partial_test( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = 1,
compare.obj =  NA)
partial_test( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = 3 )
partial( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = 3 )
partial_test( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = 3,
compare.object = FALSE)
partial( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negat" )
# works with partial string matching
partial_test( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negat",
compare.object = TRUE )
# and semi-full string matching
partial_test( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- ",
compare.object = TRUE)
devtools::check()
covr::codecov(token = TOKEN)
devtools::check()
devtools::build()
