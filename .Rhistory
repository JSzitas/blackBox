head(complex_dummy)[[1]]
gsub(x = head(complex_dummy)[[1]], pattern = "function", replacement = "")
gsub(x = head(complex_dummy)[[1]], pattern = "function|\\(", replacement = "")
gsub(x = head(complex_dummy)[[1]], pattern = "function|\\(|\\)", replacement = "")
strsplit(gsub(x = head(complex_dummy)[[1]], pattern = "function|\\(|\\)", replacement = ""),",")
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
exists(args)
exists(x = args)
?exists
missing(args)
args
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy, args = list(X = X_1))
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(complex_dummy, args = list(X = X_1))
blackbox(complex_dummy)
blackbox(complex_dummy, args = list(X = X_1, Y= Y_1))
blackbox(complex_dummy, args = list(X = X_1))
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun, args = list(x = 5))
blackbox(dummy_fun)
blackbox(dummy_fun)
dummy_fun <- function( x = 5,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun)
blackbox(dummy_fun)
dummy_fun <- function( x = 5,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(dummy_fun)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(dummy_fun)
partial_eval(fun = dummy_fun)
partial_eval(fun = dummy_fun, eval.point = 5)
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
blackbox(dummy_fun)
blackbox(dummy_fun, args = list(x = 5))
dummy_fun <- function( x )
{
x = x + 2
z = x + 3
ls()
stop()
print("Hello, github!")
return(x)
}
blackbox(dummy_fun)
dummy_fun <- function( x )
{
x = x + 2
z = x + 3
ls()
stop()
print("Hello, github!")
return(x)
}
blackbox(dummy_fun, list(x = 2))
dummy_fun <- function( x )
{
x = x + 2
z = x + 3
lister <- function() ls()
stop()
print("Hello, github!")
return(x)
}
blackbox(dummy_fun)
blackbox(dummy_fun, list(x = 2))
get_res <-       blackbox(dummy_fun, list(x = 2))
get_res
devtools::document()
devtools::check()
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun, args = list(x = 5))
devtools::check()
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
devtools::check()
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
devtools::check()
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
devtools::check()
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun, args = list(x = 5))
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(dummy_fun)
devtools::check()
devtools::check()
devtools::check()
devtools::reload()
devtools::document()
devtools::check()
remove(list=ls())
source('C:/Users/juraj/git_hub/pretestR/R/blackbox.R')
devtools::check()
devtools::check()
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a) > 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative \\<- (c-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative \\<\\- (c-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative \\<\\- (c-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative \\<\\- (c\\-a) \\> 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c-a) > 0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "0" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c\\-" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c\\\\-" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c\\\\-" )
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "(c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <_" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <-" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a)" )
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\\\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c\-a)" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c " )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c" )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c  " )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c " )
partial_eval( fun = dummy_function,
args = list(x = 10,z = FALSE, b = FALSE),
eval.point = "negative <- (c-a" )
grep(pattern = "negative <- (c-a", x = "negative <- (c-a")
grep(pattern = "negative <- (c-a)", x = "negative <- (c-a)")
grep(pattern = "negative <- (c-a)", x = "negative <- (c\\-a)")
grep(pattern = "negative <- (c\\-a)", x = "negative <- (c\\-a)")
grep(pattern = "negative <- (c)", x = "negative <- (c)")
grep(pattern = "negative <- (c", x = "negative <- (c")
grep(pattern = "negative <- c", x = "negative <- c")
grep(pattern = "negative <- c", x = "negative <- c-a")
grep(pattern = "negative <- c-a", x = "negative <- c-a")
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
source('C:/Users/juraj/git_hub/pretestR/R/partial.R')
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::build()
dummy_fun <- function( x,
y = "this_crashes",
z = 2 )
{
# these will run
x = x + 2
z = x + 3
# this will crash due to y being type character
x = y + z
return(x)
}
blackbox(fun = dummy_fun, args = list(x = 5))
dummy_fun <- function( x )
{
x = x + 2
z = x + 3
lister <- function() ls()
stop()
print("Hello, github!")
return(x)
}
blackbox(fun = dummy_fun)
devtools::check()
available::available("recovery")
available::available("Recovery")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
recover_types(fun = dummy_fun)
recover_types(fun = dummy_fun, args = list(2))
devtools::check()
devtools::check()
usethis::use_test()
usethis::use_test()
usethis::use_test()
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
usethis::use_test()
recover_types(dummy_fun())
recover_types(dummy_fun)
A <- recover_types(dummy_fun)
names(A)
source('C:/Users/juraj/git_hub/blackBox/R/recover_types.R')
A <- recover_types(dummy_fun)
names(A)
A$`Failing line`
A$'Failing line'
as.character(A$'Failing line')
A$Types
test_res$x
A$x
A$Types
A$Types$x
library(doFuture)
registerDoFuture()
plan(multiprocess)
parallel_fun <- function(x,y,z, length.out ){
magical <- function(x,y,z){
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
res <-  foreach(i = 1:length.out ) %dopar%
{
weirdness <- magical(x,y,z)
}
return(res)
}
parallel_fun(x = 5,y =3 ,z = 12, length.out = 10)
parallel_fun(x = 5,y =3 ,z = 12, length.out = 10)
parallel_fun(x = 5,y =3 ,z = "fly", length.out = 10)
parallel_fun <- function(x,y,z, length.out ){
magical <- function(x,y,z){
x <- x + 5
z <- 12
x <- y + z
return(x)
}
res <-  foreach(i = 1:length.out ) %dopar%
{
weirdness <- magical(x,y,z)
}
return(res)
}
parallel_fun(x = 5,y =3 ,z = "fly", length.out = 10)
parallel_fun(x = 5,y ="fly" ,z = 2, length.out = 10)
recover_types(parallel_fun, args = (x = 5,y ="fly" ,z = 2, length.out = 10))
recover_types(parallel_fun, args = list(x = 5,y ="fly" ,z = 2, length.out = 10))
recover_types(parallel_fun, args = list(x = 5,y ="fly" ,z = 2, length.out = 10))
recover_types(parallel_fun, args = list(x = 5,y ="fly" ,z = 2, length.out = 10))$"Failing line"
recover_types(parallel_fun, args = list(x = 5,y ="fly" ,z = 2, length.out = 10))$"Failing line" %>% as.character()
library(magrittr)
recover_types(parallel_fun, args = list(x = 5,y ="fly" ,z = 2, length.out = 10))$"Failing line" %>% as.character()
show_me <- recover_types(parallel_fun, args = list(x = 5,y ="fly" ,z = 2, length.out = 10))$"Failing line" %>% as.character()
show_me
recover(parallel_fun,
args = list( x = 5,
y ="fly",
z = 2,
length.out = 10 ))
test_res$'Objects in scope'
test_res <- recover( parallel_fun,
args = list( x = 5,
y ="fly",
z = 2,
length.out = 10 ))
test_res$'Objects in scope'
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- recover(dummy_fun)
test_res$Types$x
View(test_res)
test_res$`Objects in scope`$x
test_res$`Objects in scope`$x
test_res$`Objects in scope`$y
test_res$`Objects in scope`$z
test_res$`Objects in scope`$x
test_res$`Objects in scope`$x %>% class()
identical(list(" x = 2"         " y = \"death\"" " z = 5 " ))
identical(list(" x = 2" ," y = \"death\"" ," z = 5 " ), test_res$`Objects in scope`$x)
identical(list(c(" x = 2" ," y = \"death\"" ," z = 5 " )), test_res$`Objects in scope`$x)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun, eval.poin = 3)
source('C:/Users/juraj/git_hub/blackBox/R/partial.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun, eval.poin = 3)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun,args = list(x = 2, y = "death", z = 5),  eval.poin = 3)
View(test_res)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun,args = list(x = 2, y = "death", z = 5),  eval.point = 3)
View(test_res)
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun,  eval.point = 3)
source('C:/Users/juraj/git_hub/blackBox/R/partial.R')
dummy_fun <- function( x = 2, y = "death", z = 5 )
{
x <- x + 5
z <- 12
x <- y + 5
return(x)
}
test_res <- partial(dummy_fun,  eval.point = 3)
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5), eval.point = 2)
test_res <- partial(dummy_fun, eval.point = 2)
View(test_res)
test_no_args <- partial(dummy_fun, eval.point = 2)
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5), eval.point = 2)
identical(test_no_args, test_res)
identical(test_no_args$y, test_res$y)
test_no_args$y
test_no_args$z
test_no_args$x
test_res$x
devtools::check()
devtools::check()
test_res <- partial(dummy_fun, args = list(x = 2, y = "death", z = 5), eval.point = 2)
test_res$x
devtools::check()
test_no_args <- partial(dummy_fun, eval.point = 2)
identical(rest_no_args$x, list(c(" x = 2", " y = \"death\"", " z = 5 ")))
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("doFuture", type = "Suggests")
devtools::check()
